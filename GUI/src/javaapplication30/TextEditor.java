/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication30;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.PrintJob;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.font.TextAttribute;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Map;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.undo.UndoManager;

/**
 *
 * @author alemt
 */
public class TextEditor extends javax.swing.JFrame {

    private final UndoManager editManager;
    /**
     * Creates new form TextEditor
     */
    public TextEditor() {
        initComponents();
        //UNDO AND REDO IMPLEMENTATIONS
         editManager = new UndoManager(); 
         TextEditor.setDefaultLookAndFeelDecorated(rootPaneCheckingEnabled);
        TextArea.getDocument().addUndoableEditListener(
                new UndoableEditListener(){
                  @Override
                  public void undoableEditHappened(UndoableEditEvent e) {

                        editManager.addEdit(e.getEdit()); //if there is an edit, the manager takes it
                    }
                });
        redo.addActionListener(new ActionListener() { //if we want to redo, then redo
            @Override
            public void actionPerformed(ActionEvent e){
                if (editManager.canRedo()){
                    editManager.redo();
                }
            }
        });
        undo.addActionListener(new ActionListener() { //if we want to undo, then undo
            public void actionPerformed(ActionEvent e) {
                if (editManager.canUndo()) {
                    editManager.undo();
                }
            }
        });
        //END OF IMPLEMENTATIONS
        
        
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jColorChooser1 = new javax.swing.JColorChooser();
        jColorChooser2 = new javax.swing.JColorChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        TextArea = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        Status = new javax.swing.JTextField();
        close = new javax.swing.JButton();
        Htlm = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        New = new javax.swing.JMenuItem();
        Open = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();
        Print = new javax.swing.JMenuItem();
        About = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();
        Copy = new javax.swing.JMenuItem();
        Paste = new javax.swing.JMenuItem();
        Cut = new javax.swing.JMenuItem();
        Color = new javax.swing.JMenuItem();
        undo = new javax.swing.JMenuItem();
        redo = new javax.swing.JMenuItem();
        format = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        italic = new javax.swing.JMenuItem();
        underline = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 102, 255));
        setIconImages(null);

        TextArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextAreaActionPerformed(evt);
            }
        });

        jTextField1.setText("jTextField1");

        close.setText("Close");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });

        Htlm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HtlmActionPerformed(evt);
            }
        });

        file.setText("File");
        file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileActionPerformed(evt);
            }
        });

        New.setText("New");
        New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewActionPerformed(evt);
            }
        });
        file.add(New);

        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        file.add(Open);

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        file.add(Save);

        Print.setText("Print");
        Print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintActionPerformed(evt);
            }
        });
        file.add(Print);

        About.setText("About");
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        file.add(About);

        jMenuBar1.add(file);

        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        Copy.setText("Copy");
        Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyActionPerformed(evt);
            }
        });
        edit.add(Copy);

        Paste.setText("Paste");
        Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasteActionPerformed(evt);
            }
        });
        edit.add(Paste);

        Cut.setText("Cut");
        Cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CutActionPerformed(evt);
            }
        });
        edit.add(Cut);

        Color.setText("Color");
        Color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorActionPerformed(evt);
            }
        });
        edit.add(Color);

        undo.setText("Undo");
        undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoActionPerformed(evt);
            }
        });
        edit.add(undo);

        redo.setText("Redo");
        redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoActionPerformed(evt);
            }
        });
        edit.add(redo);

        jMenuBar1.add(edit);

        format.setText("Format");
        format.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatActionPerformed(evt);
            }
        });

        jMenuItem2.setText("bold");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        format.add(jMenuItem2);

        italic.setText("italic");
        italic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                italicActionPerformed(evt);
            }
        });
        format.add(italic);

        underline.setText("underline");
        underline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                underlineActionPerformed(evt);
            }
        });
        format.add(underline);

        jMenuBar1.add(format);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(close)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Status, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Htlm, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(close, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(430, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Htlm, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewActionPerformed
          TextArea.setText(" ") ; //we put the text area in blank
          Status.setText("new File in our text editor");
    }//GEN-LAST:event_NewActionPerformed

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        JFileChooser chooser = new JFileChooser(); //the class whic we can manipulate files
        int chooserValue = chooser.showOpenDialog(this);
        if(chooserValue == JFileChooser.APPROVE_OPTION){
            try{
                //read what it is in the file, and put in the text area
                try (Scanner read = new Scanner(chooser.getSelectedFile()) //read contain the selected file
                ) {
                    //read what it is in the file, and put in the text area
                    String buffer = "";  //temporary buffer in order to read the file
                    while(read.hasNext()){ //while the selected file is not empty, then read it
                        buffer += read.nextLine() + "\n"; //the things that we read r going to be in th ebuffer
                    }
                    TextArea.setText(buffer); //after reading, we put on our window
                    Status.setText("load file" + chooser.getSelectedFile().getAbsolutePath()); //update status button
                    read.close(); //close scanner 
                } //temporary buffer in order to read the file
                } catch (FileNotFoundException ex) {
                //we can advise in a fale has done
                    JOptionPane.showMessageDialog(this,"File not found by our editor");
            }
        }else if (chooserValue == JFileChooser.ERROR_OPTION){
            System.out.println("An error has happened ");
            System.exit(0);
        }
    }//GEN-LAST:event_OpenActionPerformed

    private void TextAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextAreaActionPerformed
      String s = TextArea.getText();
     // A string buffer is like a String, but can be modified. It contains some particular sequence of characters, but the length and content of the sequence can be changed through certain method calls. 
      //They are safe for use by multiple threads. Every string buffer has a capacity.
      
      StringBuffer sb = new StringBuffer(s.length());
      boolean lastWasBlankChar = false; 
      int len = s.length();
      char c; 
      for (int i = 0; i < len; i++) {
        c = s.charAt(i); // devuelve el caracter situado en dicha posicion
        if (c == ' ') {
            // blank gets extra work,
            // this solves the problem you get if you replace all
            // blanks with &nbsp;, if you do that you loss 
            // word breaking
            if (lastWasBlankChar) {
                lastWasBlankChar = false;
                sb.append("&nbsp;");
            } else {
                lastWasBlankChar = true;
                sb.append(' ');
            }
        } else {
            lastWasBlankChar = false;
            //
            // HTML Special Chars
            if (c == '"')
                sb.append("&quot;");
            else if (c == '&')
                sb.append("&amp;");
            else if (c == '<')
                sb.append("&lt;");
            else if (c == '>')
                sb.append("&gt;");
            else if (c == '\n')
                // Handle Newline
                sb.append("<br/>");
            else {
                int ci = 0xffff & c;
                if (ci < 160)
                    // nothing special only 7 Bit
                    sb.append(c);
                else {
                    // Not 7 Bit use the unicode system
                    sb.append("&#");
                    sb.append(new Integer(ci).toString());
                    sb.append(';');
                }
            }
        }
    }
      String aux = sb.toString();
      Htlm.setText(aux); //now we update the other box
    }//GEN-LAST:event_TextAreaActionPerformed

    private void fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        JFileChooser chooser = new JFileChooser();  //functionalitys to dialogs windows. Open, save.
        int chooseValue = chooser.showSaveDialog(this); 
        //depends on the button, return one value. So load and save must have different values
        if((chooseValue) == JFileChooser.APPROVE_OPTION){
            try {
                PrintWriter fout = new PrintWriter(chooser.getSelectedFile());
                //write in the file
                fout.print(TextArea.getText());
                fout.close();
                Status.setText("save file" + chooser.getSelectedFile().getAbsolutePath());
            } catch (FileNotFoundException ex) { //we should revise if the file is found or not
                Logger.getLogger(TextEditor.class.getName()).log(Level.SEVERE, null, ex);
                  Status.setText("Error in saving file ");
            }
        }else if((chooseValue) == JFileChooser.ERROR_OPTION){
            System.out.println("Se ha producido un error");
            System.exit(0);
        }
    }//GEN-LAST:event_SaveActionPerformed

    private void PrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintActionPerformed
        PrintJob pjob = this.getToolkit().getPrintJob( this,  "Impresion del texto",null );
    // obtain the grafic object in which we want to paint
      Graphics pg = pjob.getGraphics();     
    //set the 'paper' standards
    pg.setFont( new Font( "SansSerif",Font.ITALIC,12 ) );
    // put the message in it
    String s =  TextArea.getText();
    pg.drawString(s,100,100 );
    // Se finaliza la página
    pg.dispose();
    // Se hace que la impresora termine el trabajo y escupa la página
    pjob.end();          
    // Se acabó
    JOptionPane.showMessageDialog(null, "Se acabo la impresion");
    }//GEN-LAST:event_PrintActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
       if (JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to close this window?", "Close Window?", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
            System.exit(0);
            }
       //in case you want not to close the GUI
       this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
    }//GEN-LAST:event_closeActionPerformed

    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
         JFrame frame =new JFrame();  //to make the window
         JPanel panel = new JPanel(); //to have the panels inside the window
          JLabel  label = new JLabel("Alejandro Meza ver.1.0"); //but to update the clicks we
          JButton button = new JButton("CLOSE"); //add a button to our app
         // button.addActionListener();
         button.addActionListener(new ActionListener()
        {
             @Override
             public void actionPerformed(ActionEvent ae) {
                 System.exit(0);
             }
        });
         JLabel l4 = new JLabel();
        l4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication30/university.png"))); // NOI18N
       panel.setBorder(BorderFactory.createEmptyBorder(100,100,50,50));
       panel.setLayout(new GridLayout(0,1));
        panel.add(label);
        panel.add(l4);
        //PREGUNTAR
       
       frame.add(panel, BorderLayout.CENTER);
       frame.getContentPane().setLayout(new FlowLayout());
       frame.add(button);
       frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       frame.setBackground(new Color(247, 239, 230));
       frame.pack(); //regular stuff
       frame.setVisible(true); //regular stuff 
    }//GEN-LAST:event_AboutActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editActionPerformed

    private void CutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CutActionPerformed
        String t = TextArea.getText();
        StringSelection s = new StringSelection(t); //A class which implements the capability required to transfer a simple java String in plain text format.
        this.getToolkit().getSystemClipboard().setContents(s, s); //set the actual content of the box to the clipboard
        TextArea.setText(""); //now, remove it, but it is a joke obviously :)
    }//GEN-LAST:event_CutActionPerformed

    private void PasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasteActionPerformed
        Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard(); //clipboard is a memory location where the copy and paste data is stores
        Transferable ss = clip.getContents(this); //getcontents method, get elements from that memory location
        if(ss != null){ //we only check is there is elements in clipboard. If we have not, the comprobation doesnt have sense
            try{
                String txtPaste = (String) ss.getTransferData(DataFlavor.stringFlavor); //getData in String format. It is goint to be alocate in variable
                TextArea.setText(TextArea.getText() + txtPaste); //PENDIENTE DE REVISION
            }catch(UnsupportedFlavorException | IOException ex){
                Logger.getLogger(TextEditor.class.getName( ) ).log(Level.SEVERE,null, ex);
            }
        }
    }//GEN-LAST:event_PasteActionPerformed

    private void CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyActionPerformed
        Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();
        StringSelection ss = new StringSelection(TextArea.getSelectedText()); //
        clip.setContents(ss, ss);
    }//GEN-LAST:event_CopyActionPerformed

    private void ColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColorActionPerformed
        this.getContentPane().setBackground(new java.awt.Color(204, 166, 166));
        Status.setText("color has changed in a succesfull way");
    }//GEN-LAST:event_ColorActionPerformed

    private void undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoActionPerformed
        
    }//GEN-LAST:event_undoActionPerformed

    private void redoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoActionPerformed
       
    }//GEN-LAST:event_redoActionPerformed

    private void formatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formatActionPerformed

    private void underlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_underlineActionPerformed
        Font font = TextArea.getFont();
    Map attributes = font.getAttributes();
    attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
    TextArea.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_underlineActionPerformed

    private void italicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_italicActionPerformed
       TextArea.setFont(new Font("Italic",Font.PLAIN,14));
       Status.setText("Using Italic Font");
    }//GEN-LAST:event_italicActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        TextArea.setFont(new Font("Italic",Font.BOLD,14));
          Status.setText("Using bold Font");
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void HtlmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HtlmActionPerformed
        
    }//GEN-LAST:event_HtlmActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.lang.ClassNotFoundException
     * @throws java.lang.InstantiationException
     * @throws javax.swing.UnsupportedLookAndFeelException
     * @throws java.lang.IllegalAccessException
     */
    public static void main(String args[]) throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TextEditor().setVisible(true);
            }
        });
        
        try{
            org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(TextEditor.class);
            logger.info("this is my firt log4 statement");
            
            for(javax.swing.UIManager.LookAndFeelInfo  info :  javax.swing.UIManager.getInstalledLookAndFeels() ){
                if("Nimbus".equals(info.getName())){
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }catch(ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex){
            java.util.logging.Logger.getLogger(TextEditor.class.getName()).log(java.util.logging.Level.SEVERE,null,ex);
        }
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem About;
    private javax.swing.JMenuItem Color;
    private javax.swing.JMenuItem Copy;
    private javax.swing.JMenuItem Cut;
    private javax.swing.JTextField Htlm;
    private javax.swing.JMenuItem New;
    private javax.swing.JMenuItem Open;
    private javax.swing.JMenuItem Paste;
    private javax.swing.JMenuItem Print;
    private javax.swing.JMenuItem Save;
    private javax.swing.JTextField Status;
    private javax.swing.JTextField TextArea;
    private javax.swing.JButton close;
    private javax.swing.JMenu edit;
    private javax.swing.JMenu file;
    private javax.swing.JMenu format;
    private javax.swing.JMenuItem italic;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JColorChooser jColorChooser2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JMenuItem redo;
    private javax.swing.JMenuItem underline;
    private javax.swing.JMenuItem undo;
    // End of variables declaration//GEN-END:variables
}
